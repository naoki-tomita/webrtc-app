{"version":3,"sources":["node_modules/verbinden/client/index.ts","index.js"],"names":["require","Verbinden","h","tag","attributes","el","document","createElement","Object","keys","forEach","key","startsWith","addEventListener","substr","toLowerCase","setAttribute","style","styleName","children","append","app","getElementById","createMenu","navigator","mediaDevices","enumerateDevices","devices","filter","it","kind","select","map","value","deviceId","label","onClick","startCamera","stream","getTracks","track","peer","addTrack","getUserMedia","video","exact","frameRate","ideal","max","width","height","audio","myStream","srcObject","play","addVideo","button","position","top","left","zIndex","display","Peer","ID","Math","random","toString","substring","ws","on","onReceiveSdpMessage","bind","peers","tracks","push","id","peerInstance","RTCPeerConnection","iceServers","urls","e","candidate","sendSdpToId","localDescription","streams","createOffer","offerToReceiveAudio","offerToReceiveVideo","offer","signalingState","setLocalDescription","members","requestConnect","from","setRemoteDescription","console","log","sendAnswerTo","connectionState","createAnswer","answer","sdp","type","channel","target","send","data","onOffer","onAnswer","initialize","setTimeout","requestConnection"],"mappings":"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","file":"webapp.16a89ef7.js","sourceRoot":"..","sourcesContent":["type MessageType = \"target\" | \"broadcast\" | \"list\";\n\ninterface MessageBase {\n  type: MessageType;\n  channel: string;\n  data: any;\n}\n\ninterface Response {\n  id: string;\n}\n\ninterface TargetMessage extends MessageBase {\n  type: \"target\";\n  id: string;\n}\n\ninterface BroadcastMessage extends MessageBase {\n  type: \"broadcast\";\n}\n\ninterface ListingMessage extends MessageBase {\n  type: \"list\";\n  data: string[];\n}\n\ntype Message = TargetMessage | BroadcastMessage | ListingMessage;\ntype Callback =  (from: string, data: any) => void;\n\nexport class Verbinden {\n  private _id: string;\n  get id() { return this._id }\n\n  private client: WebSocket;\n\n  private _members: string[] = [];\n  get members() { return this._members.filter(id => id !== this.id) }\n\n  private observables: { [channel: string]: Callback[] } = {}\n  constructor(url: string) {\n    this._id = Math.random().toString(32).substring(2);\n    this.client = new WebSocket(`${url}?id=${this._id}`);\n    this.client.addEventListener(\"message\", this.receiveMessage.bind(this));\n  }\n\n  private receiveMessage(e: MessageEvent) {\n    const message = JSON.parse(e.data) as Message & Response;\n    switch (message.type) {\n      case \"list\":\n        this._members = message.data;\n        this.observables.__member_changed__.forEach(cb => cb(\"__server__\", this._members));\n        return;\n      default:\n        this.observables[message.channel].forEach(cb => cb(message.id, message.data));\n        return;\n    }\n  }\n\n  on(channel: string, cb: Callback) {\n    this.observables[channel] = this.observables[channel] || [];\n    this.observables[channel].push(cb);\n  }\n\n  onMemberChanged(cb: () => void) {\n    this.observables[\"__member_changed__\"].push(cb);\n  }\n\n  channel(channel: string) {\n    return {\n      target: (id: string) => {\n        return {\n          send: (data: any) => this._send({ type: \"target\", channel, id, data })\n        };\n      },\n      broadcast: (data: any) => {\n        this._send({ type: \"broadcast\", channel, data });\n      }\n    }\n  }\n\n  send(channel: string, target: string, data: any) {\n    this._send({ type: \"target\", channel, id: target, data });\n  }\n\n  private _send(message: Message) {\n    this.client.send(JSON.stringify(message));\n  }\n}\n","const { Verbinden } = require(\"verbinden/client\");\n\n/**\n * @param {string} tag\n * @param {{[key: string]: any}} attributes\n * @param  {...any} children\n * @returns {any}\n */\nfunction h(tag, attributes, ...children) {\n  const el = document.createElement(tag);\n  Object.keys(attributes).forEach(key => {\n    if (key.startsWith(\"on\")) {\n      el.addEventListener(key.substr(2).toLowerCase(), attributes[key]);\n      return;\n    }\n    if (key === \"style\") {\n      const style = attributes[\"style\"]\n      Object.keys(style).forEach(styleName => {\n        el.style[styleName] = style[styleName];\n      });\n      return;\n    }\n    el.setAttribute(key, attributes[key]);\n    return;\n  });\n  el.append(...children);\n  return el;\n}\n\nconst app = document.getElementById(\"app\");\nasync function createMenu() {\n  const devices = (await navigator.mediaDevices.enumerateDevices()).filter(it => it.kind === \"videoinput\");\n  const select = h(\"select\", {},\n    ...devices.map(it => h(\"option\", { value: it.deviceId }, it.label))\n  );\n  app?.append(\n    h(\"div\", {}, select,\n      select,\n      h(\"button\", { onClick: async () => {\n        const stream = await startCamera(select.value);\n        stream.getTracks().forEach(track => peer.addTrack(track, stream));\n      }}, \"select\")\n    )\n  );\n}\n\nasync function startCamera(deviceId) {\n  const myStream = await navigator.mediaDevices.getUserMedia({\n    video: {\n      deviceId: { exact: deviceId },\n      frameRate: { ideal: 10, max: 15 },\n      width: 480, height: 300\n    },\n    audio: false,\n  });\n  const video = h(\"video\", {});\n  app?.append(h(\"div\", {}, video));\n  video.srcObject = myStream;\n  video.play();\n  return myStream;\n}\n\n/**\n * @param {MediaStream} stream\n */\nasync function addVideo(stream) {\n  const video = h(\"video\", {});\n  const button = h(\"button\", { style: { position: \"absolute\", top: 50, left: 30, zIndex: 1 }, onClick: () => (button.style.display = \"none\", video.play()) }, \"play\");\n  app?.append(h(\"div\", {},\n    button,\n    video,\n  ));\n  video.srcObject = stream;\n}\n\nclass Peer {\n  constructor() {\n    this.ID = Math.random().toString(32).substring(2);\n    this.ws = new Verbinden(`wss://webrtc-room7.herokuapp.com`);\n    this.ws.on(\"signaling\", this.onReceiveSdpMessage.bind(this));\n    /** @type {any} */\n    this.peers = {};\n    /** @type {{track: MediaStreamTrack, stream: MediaStream}[]} */\n    this.tracks = []\n  }\n\n  addTrack(track, stream) {\n    this.tracks.push({ track, stream });\n    Object.keys(this.peers).forEach(id => {\n      const peer = this.peerInstance(id);\n      peer.addTrack(track, stream);\n    })\n  }\n\n  /**\n   * @param {string} id\n   * @returns {RTCPeerConnection}\n   */\n  peerInstance(id) {\n    if (this.peers[id]) {\n      return this.peers[id];\n    }\n    const peer = this.peers[id] = new RTCPeerConnection({\n      iceServers: [\n        { urls: \"stun:stun.webrtc.ecl.ntt.com:3478\" }\n      ]\n    });\n\n    peer.addEventListener(\"icecandidate\", e =>\n      !e.candidate && this.sendSdpToId(id, peer.localDescription || {}))\n\n    peer.addEventListener(\"track\", e =>\n      e.streams.forEach(stream => addVideo(stream)));\n\n    peer.addEventListener(\"negotiationneeded\", async e => {\n      const offer = await peer.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n      });\n      if (peer.signalingState != \"stable\") return;\n      await peer.setLocalDescription(offer);\n      this.sendSdpToId(id, peer.localDescription || {});\n    });\n\n    this.tracks.forEach(({ track, stream }) => peer.addTrack(track, stream));\n\n    return peer;\n  }\n\n  async requestConnection() {\n    this.ws.members.forEach(this.requestConnect.bind(this));\n  }\n\n  async requestConnect(id) {\n    const peer = this.peerInstance(id);\n    const offer = await peer.createOffer();\n    await peer.setLocalDescription(offer);\n    this.sendSdpToId(id, offer);\n  }\n\n  /**\n   * @param {string} from\n   * @param {RTCSessionDescriptionInit} offer\n   */\n  async onOffer(from, offer) {\n    const peer = this.peerInstance(from);\n    await peer.setRemoteDescription(offer);\n    console.log(\"success to set remote description\")\n    this.sendAnswerTo(from);\n  }\n\n  /**\n   * @param {string} id\n   */\n  async sendAnswerTo(id) {\n    const peer = this.peerInstance(id);\n    if (peer.connectionState === \"connected\") {\n      return;\n    }\n\n    const answer = await peer.createAnswer();\n    await peer.setLocalDescription(answer);\n    this.sendSdpToId(id, peer.localDescription || {});\n  }\n\n  /**\n   * @param {string} from\n   * @param {RTCSessionDescriptionInit} answer\n   */\n  async onAnswer(from, answer) {\n    const peer = this.peerInstance(from);\n    if (peer.connectionState === \"connected\") {\n      return;\n    }\n    await peer.setRemoteDescription(answer);\n  }\n\n  /**\n   * @param {string} id\n   * @param {RTCSessionDescriptionInit} sdp\n   */\n  sendSdpToId(id, sdp) {\n    console.log(\"send to: \", id, sdp.type);\n    this.ws.channel(\"signaling\").target(id).send(sdp);\n  }\n\n  onReceiveSdpMessage(id, data) {\n    switch (data.type) {\n      case \"offer\":\n        this.onOffer(id, data);\n        break;\n      case \"answer\":\n        this.onAnswer(id, data);\n        break;\n    }\n  }\n}\n\nconst peer = new Peer();\nasync function initialize() {\n  await createMenu();\n  setTimeout(() => peer.requestConnection(), 2000);\n}\n\ninitialize();\n"]}